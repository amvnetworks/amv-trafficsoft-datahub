import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    ext {
        trafficsoftRestVersion = '0.0.10'
        vertxVersion = '3.4.2'
        jacksonVersion = '2.9.1'
        springBootVersion = '2.0.0.M3'
        reactorVersion = '3.1.0.RELEASE'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'nu.studer:gradle-credentials-plugin:1.0.3'
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '1.8'
    id 'nebula.lint' version '6.8.0'
    id 'nebula.release' version '6.0.0'
    id 'nebula.dependency-lock' version '4.9.3'
    id 'nebula.info' version '3.6.0'
    id 'nebula.project' version '3.4.0'
    id 'nebula.optional-base' version '3.2.0'
    id 'com.github.ben-manes.versions' version '0.14.0'
    id 'findbugs'
//    id 'checkstyle'
}

description = 'Please provide a meaningful description'

group = 'org.amv.trafficsoft.datahub'

contacts {
    'devlopment@amv-networks.com' {
        moniker 'AMV Networks GmbH'
        role 'owner'
        github 'amvnetworks'
    }
}

allprojects {
    apply plugin: 'nu.studer.credentials'

    group 'org.amv.trafficsoft.datahub'

    configurations.all {
        resolutionStrategy {
            preferProjectModules()
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()

            force 'com.netflix.archaius:archaius-core:0.6.6',
                    'commons-codec:commons-codec:1.10',
                    'org.slf4j:slf4j-api:1.7.25',
                    'com.google.guava:guava:22.0',
                    'io.dropwizard.metrics:metrics-core:3.2.5',
                    'org.eclipse.aether:aether-api:1.1.0',
                    'org.eclipse.aether:aether-spi:1.1.0',
                    'org.eclipse.aether:aether-util:1.1.0',
                    'org.eclipse.aether:aether-impl:1.1.0',
                    'com.fasterxml.jackson.core:jackson-core:2.9.1',
                    'com.fasterxml.jackson.core:jackson-databind:2.9.1',
                    'com.fasterxml.jackson.core:jackson-annotations:2.9.1',
                    'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.1',
                    'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.1',
                    'com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.1',
                    'io.reactivex:rxjava:1.3.0',
                    'org.reactivestreams:reactive-streams:1.0.1',
                    'org.springframework.boot:spring-boot-autoconfigure:2.0.0.M3',
                    'org.apache.commons:commons-lang3:3.5',
                    'com.zaxxer:HikariCP:2.7.1'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'nebula.project'
    apply plugin: 'nebula.info'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'nebula.dependency-lock'
    apply plugin: 'nebula.lint'
    apply plugin: 'io.franzbecker.gradle-lombok'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
//    apply plugin: 'checkstyle'

    String nexusPwd = credentials.nexuspwd

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // ---- prepare task graph - disable long running tasks on demand
    gradle.taskGraph.whenReady { graph ->
        def isMinimalBuild = project.hasProperty("minimal")

        def enableAdditionalLongRunningTasks = !isMinimalBuild

        if (!enableAdditionalLongRunningTasks) {
            findbugsMain.enabled = false
            //checkstyleMain.enabled = false
            javadoc.enabled = false
        }
    }

    repositories {
        mavenLocal()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-milestone' }
        jcenter()
    }

    dependencies {
        compile 'com.google.guava:guava:22.0'
        compile 'io.dropwizard.metrics:metrics-core:3.2.5'
        compileOnly 'org.projectlombok:lombok:1.16.16'

        compile "io.projectreactor:reactor-core:${reactorVersion}"
        compile "io.projectreactor.addons:reactor-adapter:${reactorVersion}"
        compile "io.projectreactor.addons:reactor-extra:${reactorVersion}"

        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'pl.pragmatists:JUnitParams:1.0.6'

        // TODO: commons-lang should be a testCompile dependency:
        // only used for RandomUtils in tests
        compile 'org.apache.commons:commons-lang3:3.5'

        testCompile "io.vertx:vertx-unit:${vertxVersion}"
        testCompile "io.projectreactor:reactor-test:${reactorVersion}"

        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
        //testCompile("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
    }

    lombok {
        version = '1.16.16'
        sha256 = 'fbf682c7ff113e5187a9c4b4cbd7a8ad782abd8ccff91b9fa7289a4a6aa8c19a'
    }

    task delombok(type: DelombokTask, dependsOn: compileJava) {
        ext.outputDir = file("$buildDir/delombok")
        outputs.dir(outputDir)
        sourceSets.main.java.srcDirs.each {
            inputs.dir(it)
            args(it, '-d', outputDir)
        }
    }

    task delombokHelp(type: DelombokTask) {
        args '--help'
    }

    javadoc {
        dependsOn delombok
        source = delombok.outputDir
        exclude 'lombok.config'
        failOnError = false
    }

    jar.doFirst {
        // other manifest attributes will be populated by nebula.info plugin
        // see https://github.com/nebula-plugins/gradle-info-plugin
        def vendor = 'AMV Networks GmbH'
        manifest {
            attributes(
                    'Specification-Title': project.description,
                    'Specification-Version': project.version,
                    'Specification-Vendor': vendor,
                    'Implementation-Vendor': vendor
            )
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    task testJar(type: Jar) {
        classifier = 'test'
        from sourceSets.test.output
    }

    artifacts {
        archives /*javadocJar, */ sourcesJar, testJar
    }

    /*checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        toolVersion = '6.7'
        ignoreFailures = true
        showViolations = false
        sourceSets = [sourceSets.main]
        reportsDir = rootProject.file("$buildDir/reports/checkstyle")
    }*/

    findbugs {
        effort = 'min'
        ignoreFailures = true
        sourceSets = [sourceSets.main]
    }

    task subprojectsDependencies(type: DependencyReportTask) {

    }

    test {
        // Generate code coverage reports ... run with jacoco
        jacocoTestReport {
            additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
            reports {
                xml.enabled true
                csv.enabled false
                html.destination file("${buildDir}/reports/jacoco/html")
            }
            executionData = files("${buildDir}/jacoco/test.exec")
        }

        // * enable on demand
        // testLogging.showStandardStreams = true
        finalizedBy jacocoTestReport
    }

    // ---- upload into Nexus
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${nexusUrl}/content/repositories/releases") {
                    authentication(userName: nexusUsername, password: nexusPwd)
                }
                snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
                    authentication(userName: nexusUsername, password: nexusPwd)
                }
                pom.version = project.version
                pom.artifactId = project.name
                pom.groupId = project.group
            }
        }
    }
}
