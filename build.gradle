import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    ext {
        trafficsoftRestVersion = '0.0.9'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'nu.studer:gradle-credentials-plugin:1.0.3'
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '1.8'
    id 'nebula.lint' version '6.8.0'
    id 'nebula.release' version '6.0.0'
    id 'nebula.dependency-lock' version '4.9.3'
    id 'nebula.info' version '3.6.0'
    id 'nebula.project' version '3.4.0'
    id 'nebula.optional-base' version '3.2.0'
    id 'com.github.ben-manes.versions' version '0.14.0'
    id 'findbugs'
    id 'com.jfrog.bintray' version '1.7.3'
//    id 'checkstyle'
}

apply plugin: 'maven'

contacts {
    'devlopment@amv-networks.com' {
        moniker 'AMV Networks GmbH'
        role 'owner'
        github 'amvnetworks'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'nu.studer.credentials'

    repositories {
        mavenLocal()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-milestone' }
        jcenter()
    }

    group = 'org.amv.trafficsoft.datahub'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'nebula.dependency-lock'
    apply plugin: 'nebula.lint'
    apply plugin: 'nebula.nebula-release'
    apply plugin: 'nebula.info'
    apply plugin: 'nebula.project'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'io.franzbecker.gradle-lombok'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
//    apply plugin: 'checkstyle'

    String nexusPwd = credentials.nexuspwd

    dependencies {
        compile 'com.google.guava:guava:21.0'
        compile 'io.dropwizard.metrics:metrics-core:3.2.3'
        compileOnly 'org.projectlombok:lombok:1.16.16'

        compile 'io.projectreactor:reactor-core:3.1.0.M2'
        compile 'io.projectreactor.addons:reactor-adapter:3.1.0.M2'
        compile 'io.projectreactor.addons:reactor-extra:3.1.0.M2'

        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'pl.pragmatists:JUnitParams:1.0.6'

        // TODO: commons-lang should be a testCompile dependency:
        // only used for RandomUtils in tests
        compile 'org.apache.commons:commons-lang3:3.5'

        testCompile 'io.projectreactor:reactor-test:3.1.0.M2'

        testCompile('org.springframework.boot:spring-boot-starter-test:2.0.0.M2')
        testCompile('org.springframework.boot:spring-boot-starter-webflux:2.0.0.M2')
    }

    lombok {
        version = '1.16.16'
        sha256 = 'fbf682c7ff113e5187a9c4b4cbd7a8ad782abd8ccff91b9fa7289a4a6aa8c19a'
    }

    task delombok(type: DelombokTask, dependsOn: compileJava) {
        ext.outputDir = file("$buildDir/delombok")
        outputs.dir(outputDir)
        sourceSets.main.java.srcDirs.each {
            inputs.dir(it)
            args(it, '-d', outputDir)
        }
    }

    task delombokHelp(type: DelombokTask) {
        args '--help'
    }

    javadoc {
        dependsOn delombok
        source = delombok.outputDir
        exclude 'lombok.config'
        failOnError = false
    }

    tasks.withType(Jar).all { jarTask ->
        manifest {
            attributes(
                    'Artifact': project.name,
                    'Group': rootProject.group,
                    'Build-Version': rootProject.version
            )
        }
    }
    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    task testJar(type: Jar) {
        classifier = 'test'
        from sourceSets.test.output
    }

    artifacts {
        archives /*javadocJar, */ sourcesJar, testJar
    }

    /*checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        toolVersion = '6.7'
        ignoreFailures = true
        showViolations = false
        sourceSets = [sourceSets.main]
        reportsDir = rootProject.file("$buildDir/reports/checkstyle")
    }*/

    findbugs {
        effort = 'min'
        ignoreFailures = true
        sourceSets = [sourceSets.main]
    }

    task subprojectsDependencies(type: DependencyReportTask) {

    }

    test {
        // Generate code coverage reports ... run with jacoco
        jacocoTestReport {
            additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
            reports {
                xml.enabled true
                csv.enabled false
                html.destination file("${buildDir}/reports/jacoco/html")
            }
            executionData = files("${buildDir}/jacoco/test.exec")
        }

        // * enable on demand
        // testLogging.showStandardStreams = true
        finalizedBy jacocoTestReport
    }

    // ---- upload into Nexus
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "${nexusUrl}/content/repositories/releases") {
                    authentication(userName: nexusUsername, password: nexusPwd)
                }
                snapshotRepository(url: "${nexusUrl}/content/repositories/snapshots") {
                    authentication(userName: nexusUsername, password: nexusPwd)
                }
                pom.version = project.version
                pom.artifactId = project.name
                pom.groupId = project.group
            }
        }
    }
}
